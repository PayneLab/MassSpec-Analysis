{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\M McCown\\Jupyter\\readin.py:96: RuntimeWarning: divide by zero encountered in log\n",
      "  dfl = (np.log(df)).replace(-np.inf, 0)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from readin import *\n",
    "from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes\n",
    "from mpl_toolkits.axes_grid1.inset_locator import mark_inset\n",
    "\n",
    "ms3data = readin(\"proteinGroups_MS3_simplified.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "leastValue = np.nanmin(ms3data.replace(0, np.nan).values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Variance Between Cell Lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "FOLD_CHANGE_THRESHOLD = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "technical_replicates = {\n",
    "    \"Cell Line 1\":[0,1,2],\n",
    "    \"Cell Line 2\":[3,4,5],\n",
    "    \"Cell Line 3\":[6,8],\n",
    "    \n",
    "    \"Cell Line 4\":[10,11,12],\n",
    "    \"Cell Line 5\":[13,14,15],\n",
    "    \"Cell Line 6\":[16,18]\n",
    "}\n",
    "\n",
    "ms3Samples = {}\n",
    "sample_aves = {}\n",
    "leastValue = np.inf\n",
    "\n",
    "for sample in technical_replicates:\n",
    "    #\n",
    "    reps = {}\n",
    "    sample_proteins = {}\n",
    "    for rep in technical_replicates[sample]:\n",
    "        reps[ms3data.iloc[:,rep].name] = ms3data.iloc[:,rep]\n",
    "    ms3Samples[sample] = pd.DataFrame.from_dict(reps, dtype = float)\n",
    "        \n",
    "    for r in range(0, len(list(reps.values())[0])):\n",
    "        rep_for_protein = []\n",
    "        p = ms3data.iloc[r].name\n",
    "        for rep in reps.values():\n",
    "            if rep[r] > 0: rep_for_protein.append(rep[r])\n",
    "            if rep[r] > 0.0 and rep[r] < leastValue: leastValue=rep[r]\n",
    "        if len(rep_for_protein) > 1: \n",
    "            sample_proteins[p] = mean(rep_for_protein)\n",
    "        else: sample_proteins[p] = 0.0\n",
    "    sample_aves[sample] = sample_proteins\n",
    "sample_aves = pd.DataFrame.from_dict(sample_aves, dtype = float)\n",
    "\n",
    "sample_names = []\n",
    "for i in sample_aves:\n",
    "    sample_names.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.047802765844993\n"
     ]
    }
   ],
   "source": [
    "print(leastValue)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "##### These are the same loops as below, to compare all lines to all lines without duplicates\n",
    "for i in range(0,len(sample_names)-1):\n",
    "\n",
    "    for o_ser_index in range(i+1,len(sample_names)):\n",
    "\n",
    "        print (i, o_ser_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "h = ms3data.shape[0]\n",
    "variances = {}\n",
    "var_flat = np.empty(shape = (h*15))\n",
    "fold_changes = {}\n",
    "flat_index = 0\n",
    "\n",
    "for ser_index in range(0,len(sample_names)-1): #these are the keys to ms3Samples\n",
    "    ser = sample_names[ser_index]\n",
    "    sample_df1 = ms3Samples[ser]\n",
    "    for o_ser_index in range(ser_index+1,len(sample_names)): #keys again\n",
    "        o_ser = sample_names[o_ser_index]\n",
    "        #compare variance in sample versus otherSample\n",
    "        sample_df2 = ms3Samples[o_ser]\n",
    "        for protein in sample_df1.index:\n",
    "            t1 = [x for x in sample_df1.loc[protein,:] if x != 0]\n",
    "            t2 = [x for x in sample_df2.loc[protein,:] if x != 0]\n",
    "            if len(t1) > 1: v1 = variance(t1)\n",
    "            else: v1 = 0\n",
    "            if len(t2) > 1: v2 = variance(t2)\n",
    "            else: v2 = 0\n",
    "            v = (v1+v2)/2\n",
    "            variances[((ser,o_ser),protein)] = v\n",
    "            #this needs to implement the half-least-psuedo-zero to avoid divided by zero errors\n",
    "            m2 =skipZeroMean(t2); m1 = skipZeroMean(t1)\n",
    "            if m1 ==0: m1 = leastValue/2\n",
    "            if m2 ==0: m2 = leastValue/2\n",
    "            fold_changes[((ser,o_ser),protein)] = m2/m1\n",
    "            var_flat[flat_index]=v\n",
    "            flat_index +=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Volcano Graph\n",
    "plt.scatter(fold_changes.values(), variances.values())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Log-Normalized Technical Variance Thresholds\n",
    "###### Ignoring Zeros: \n",
    "###### 95% threshold:  0.2601427941399485\n",
    "###### 99% threshold:  0.5243715339788084"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Log-Normalized Technical Variance Thresholds, Ignoring Zeros: \n",
    "threshold95 = 0.2601427941399485\n",
    "threshold99 = 0.5243715339788084"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Volcano Graph\n",
    "plt.title(\"Log 2 Fold Changes\")\n",
    "log2_fold_changes = [math.log2(x) for x in fold_changes.values()]\n",
    "plt.scatter(log2_fold_changes, variances.values())\n",
    "plt.axvline(x=FOLD_CHANGE_THRESHOLD, linestyle='dashed')\n",
    "plt.axvline(x=-FOLD_CHANGE_THRESHOLD, linestyle='dashed')\n",
    "plt.axhline(y=threshold95, color='b', linestyle='-')\n",
    "plt.axhline(y=threshold99, color='b', linestyle='-',alpha=.5)\n",
    "plt.gca().invert_yaxis()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 proteins change significantly at least once, out of 1436 (9.61%))\n",
      "77 proteins are upregulated, out of 1436 (5.36%))\n",
      "61 proteins are upregulated, out of 1436 (4.25%))\n"
     ]
    }
   ],
   "source": [
    "REPORT_ALL=False\n",
    "for ser_index in [0]:#range(0,len(sample_names)-1): \n",
    "    ser = sample_names[ser_index]\n",
    "    for o_ser_index in [1]:#range(ser_index+1,len(sample_names)):\n",
    "        print()\n",
    "        o_ser = sample_names[o_ser_index]\n",
    "        svo_fc = {x:fold_changes[x] for x in fold_changes if x[0] == (ser,o_ser)}\n",
    "        svo_var = {x:variances[x] for x in variances if x[0] == (ser,o_ser)}\n",
    "        \n",
    "        log2_fold_changes = [math.log2(x) for x in svo_fc.values()]\n",
    "        #fig = plt.figure(figsize=(12,8))\n",
    "        fig, ax = plt.subplots() \n",
    "        fig.set_figheight(8)\n",
    "        fig.set_figwidth(12)\n",
    "        \n",
    "        plt.title(ser+\" vs \"+o_ser)\n",
    "        plt.scatter(log2_fold_changes, svo_var.values())\n",
    "        \n",
    "        plt.axvline(x=  FOLD_CHANGE_THRESHOLD, linestyle='dashed')\n",
    "        plt.axvline(x= -FOLD_CHANGE_THRESHOLD, linestyle='dashed')\n",
    "        #plt.axvline(x=  1.75, linestyle='dotted', alpha=.4)\n",
    "        #plt.axvline(x= -2, linestyle='dotted', alpha=.4)\n",
    "        plt.axhline(y=threshold95, color='b', linestyle='-')\n",
    "        #plt.axhline(y=threshold99, color='b', linestyle='dotted', alpha=.4)\n",
    "        plt.gca().invert_yaxis()\n",
    "        \n",
    "        plt.rc('axes', titlesize=45)\n",
    "        plt.rc('axes', labelsize=25)\n",
    "\n",
    "        plt.rc('xtick', labelsize=20)\n",
    "        plt.rc('ytick', labelsize=20) \n",
    "        plt.xlabel(\"Log2 Fold Change\")\n",
    "        plt.ylabel(\"Variance\")\n",
    "        \n",
    "        axins = zoomed_inset_axes(ax, 2, loc=3) \n",
    "        axins.scatter(log2_fold_changes, svo_var.values())\n",
    "        axins.set_xlim(-2.6, -1.75) # apply the x-limits\n",
    "        axins.set_ylim(-0.02, 0.2)\n",
    "        axins.xaxis.set_visible(False)\n",
    "        axins.yaxis.set_visible(False)\n",
    "        axins.invert_yaxis()\n",
    "        mark_inset(ax, axins, loc1=1, loc2=2, fc=\"none\", ec=\"0.5\")\n",
    "        \n",
    "        fig.savefig('Cell Lines 1 vs 2.png', dpi=300)\n",
    "        plt.show()\n",
    "        \n",
    "        weirdpoints = []\n",
    "        for key in fold_changes:\n",
    "            if abs(math.log2(fold_changes[key])) > FOLD_CHANGE_THRESHOLD:\n",
    "                if variances[key] < threshold95:\n",
    "                    if key[0] == ((ser,o_ser)):\n",
    "                        weirdpoints.append(key)\n",
    "            \n",
    "        line_category_counts = {}#Example key = \"Cell Line1 vs Cell line 2\" value = number of occurances\n",
    "        protein_category_counts = {}#Name:Frequency\n",
    "        for key in weirdpoints:\n",
    "            line_category = (key[0][0]+\" vs \"+key[0][1])\n",
    "            if line_category in line_category_counts:\n",
    "                line_category_counts[line_category] += 1\n",
    "            else: line_category_counts[line_category] = 1\n",
    "    \n",
    "            protein = key[1]\n",
    "            if protein in protein_category_counts:\n",
    "                protein_category_counts[protein] += 1\n",
    "            else:protein_category_counts[protein] = 1\n",
    "        \n",
    "        print (\"{0} proteins change significantly at least once, out of {1} ({2:.2f}%))\"\n",
    "               .format(len(protein_category_counts), ms3data.shape[0], 100*len(protein_category_counts)/ms3data.shape[0]))\n",
    "        \n",
    "        \n",
    "        up_reg_points = []\n",
    "        down_reg_points = []\n",
    "        for key in weirdpoints:\n",
    "            if fold_changes[key] > 1: up_reg_points.append(key)\n",
    "            if fold_changes[key] < 1: down_reg_points.append(key)\n",
    "        \n",
    "        print (\"{0} proteins are upregulated, out of {1} ({2:.2f}%))\"\n",
    "               .format(len(up_reg_points), ms3data.shape[0], len(up_reg_points)/ms3data.shape[0]*100))\n",
    "        print (\"{0} proteins are upregulated, out of {1} ({2:.2f}%))\"\n",
    "               .format(len(down_reg_points), ms3data.shape[0], len(down_reg_points)/ms3data.shape[0]*100))\n",
    "        \n",
    "        if REPORT_ALL==True:\n",
    "            print(\"\\nProtein\\t\\t  Fold Change\\t\\t Variance\\n\")\n",
    "            for key in weirdpoints:\n",
    "                print (key[1],\"\\t{0:.4f}\".format(math.log2(fold_changes[key])),\n",
    "                       \"\\t{0:.4f}\".format(variances[key]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
